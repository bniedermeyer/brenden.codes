{"data":{"site":{"siteMetadata":{"author":{"name":"Brenden Niedermeyer","contacts":{"twitter":"thenieds"}},"disqusShortname":"","subtitle":"","title":"Blog | Brenden Niedermeyer","url":"https://brenden.codes"}},"markdownRemark":{"id":"3c2fcb43-79cd-5de8-a233-b3fb2dfd5c1e","html":"<p>One of the things that’s always had a higher barrier of entry in the Angular ecosystem is creating libraries of components that other Angular apps can use. The Angular team published guidance with things like the <a href=\"https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit\">Angular Package Format</a> and from that the community has created some fantastic tools, like <a href=\"https://github.com/jvandemo/generator-angular2-library\">generator-angular2-library</a>, that make it easier. However, there was never a tool that generated opinionated implementations of the Angular Package Format the same way that developers who used the Angular CLI in their normal project workflows were used to.</p>\n<p>With the recent release of version 6 for the Angular CLI, we now have access to tools that can help us build libraries while still taking advantage of other powerful aspects of the CLI, such as schematics, without leaving the workflows we are used to! I will show you how to the CLI to get started building your own component libraries.</p>\n<p>We’ll cover:</p>\n<ul>\n<li><a href=\"#generating-a-library-project-with-the-angular-cli\">Generating a library with the Angular CLI</a></li>\n<li><a href=\"#building-components-for-your-library\">Building components for your library</a></li>\n<li><a href=\"#using-your-library-in-other-applications\">Using your library in other applications</a></li>\n<li><a href=\"#publishing-your-library-for-others-to-use\">Publishing your library for others to use</a></li>\n</ul>\n<h2 id=\"generating-a-library-project-with-the-angular-cli\"><a href=\"#generating-a-library-project-with-the-angular-cli\" aria-label=\"generating a library project with the angular cli permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating a library project with the Angular CLI</h2>\n<p>First thing’s first. We need to setup our project. If you don’t have the latest version of the CLI grab it from npm.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @angular/cli@latest</code></pre></div>\n<p>Now create a new project with the CLI. Nothing new here.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng new my-app</code></pre></div>\n<p>If you’re used to working with the Angular CLI you might notice a couple changes to the project structure you know and love. The most noticable of which is that the old <code class=\"language-text\">angular-cli.json</code> is gone and now replaced with a new <code class=\"language-text\">angular.json</code> file.</p>\n<p>This file is the key to one of the biggest new features in version 6. Now the Angular CLI can create and work with workspaces that contain one or more multiple Angular projects. This <code class=\"language-text\">angular.json</code> file gives you control over the configuration of each of those projects. This is ultimately what makes building of libraries within the CLI possible because we need handle the building of libraries differently than we normally would for normal Angular apps.</p>\n<p>Ok - so now we know a bit more about how libraries within CLI pojects work; let’s generate the library structure in our project. We do this with the <code class=\"language-text\">generate</code> command just like we would to create a component, service, module, etc…</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng generate library my-new-lib</code></pre></div>\n<p>This creates a new <code class=\"language-text\">/projects</code> directory with a new folder for your library and some example files.</p>\n<p><img src=\"/media/component-lib-cli/library-dir-structure.png\" alt=\"new library directory structure\"></p>\n<p>The files to really take note of here are <code class=\"language-text\">/src/public_api.ts</code>, <code class=\"language-text\">ng-package.json</code>, and <code class=\"language-text\">ng-package.prod.json</code>. These files control the configuration for <a href=\"https://github.com/dherges/ng-packagr\">ng-packagr</a> - the library that powers the packaging of your library. I encourage you to check out the project and familiarize yourself with how it works, but here is a quick and dirty overview:</p>\n<ul>\n<li><code class=\"language-text\">public_api.ts</code> is the new entry point for your library. If you have any files that you want accessable to consumers of your library (modules, components, etc…) you need to export them here in addition to exporting them from whatever modules are in your library.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* src/public_api.ts */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/my-new-library.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/my-new-library.component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/my-new-library.module'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ng-package.json</code> and <code class=\"language-text\">ng-package.prod.json</code> control the configuration for the packaging process that ng-packagr performs. You can use them to change things like the destination build directory or defining a different entry point for your app. <code class=\"language-text\">ng-package.json</code> is used during your <code class=\"language-text\">ng build</code> command and <code class=\"language-text\">ng-package.prod.json</code> is used when you run <code class=\"language-text\">ng build --prod</code>. The only difference between these two files right now is that <code class=\"language-text\">ng-package.json</code> contains a <code class=\"language-text\">deleteDestPath</code> flag that will prevent your destination directory from being deleted before running a build. This will be helpful during development when you are constantly making changes.</li>\n</ul>\n<blockquote>\n<p>Protip: if your library needs to do something like bundle an overall Sass file, you will need to include something like <a href=\"https://github.com/SimplrJS/scss-bundle\">scss-bundle</a> in your workflow. <a href=\"https://github.com/dherges/ng-packagr/issues/273#issuecomment-345059670\">See here for more information</a></p>\n</blockquote>\n<h2 id=\"building-components-for-your-library\"><a href=\"#building-components-for-your-library\" aria-label=\"building components for your library permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building components for your library</h2>\n<p>Now we have the general structure for our library setup. It’s time to start building!</p>\n<p>First add <a href=\"https://material.angular.io\">Angular Material</a> to our project.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng add @angular/material --project my-app</code></pre></div>\n<p>“Wait, why are we adding Material to my-app and not my-new-lib?” Good question. The easy answer to that question is that in this case Material is a peer dependency of our library. We don’t want it to be downloaded each time our library is installed somewhere - that can lead to things like huge final bundles when the application is built. Instead we want to mandate that whichever project is using our library needs to also have Material installed as well. For libraries that will be installed and consumed by third parties (hint, hint: ours) you’ll need to add things like Material to the peer depencies. There’s a good discussion about when to use peer vs. normal depencies <a href=\"https://stackoverflow.com/questions/26737819/why-use-peer-dependencies-in-npm-for-plugins\">here</a>.</p>\n<p>Additionaly, the <code class=\"language-text\">ng add</code> command for Material only works for standard project configuration, i.e. those generated by the <code class=\"language-text\">ng new</code> command. If you were to run <code class=\"language-text\">ng add @angular/material --project my-new-lib</code> you would get an error saying so. The schematic that is being run in the background to add Material assumes you are adding it to an existing Angular app and not a library so it won’t understand since the structure inside <code class=\"language-text\">angular.json</code> that is setup for your library.</p>\n<p>Go ahead and add to our peer dependencies now.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-new-library\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"peerDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@angular/common\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.0-rc.0 || ^6.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@angular/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.0-rc.0 || ^6.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@angular/cdk\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@angular/material\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s setup the module for our library. First, delete the example files that were generated by the CLI in <code class=\"language-text\">src/lib</code> and from <code class=\"language-text\">public_api.ts</code>. Then generate the module.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> projects/my-new-library/src/lib\n$ ng generate module my-lib --flat --spec <span class=\"token boolean\">false</span></code></pre></div>\n<p>Since we will want others to consume this module we need to add it to <code class=\"language-text\">public_api.ts</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/*\n * Public API Surface of my-new-library\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/my-lib.module'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For this example the library will have a component that consists of a button and a badge. Each time the button is clicked the badge will update and show the total number of clicks. For added complexity the component should also emit an event to let any parent component know that the count has changed and what the current count is.</p>\n<p>First generate the component.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng generate component counter-button</code></pre></div>\n<p>Export the component that was just created from our library. Also import the <code class=\"language-text\">MatBadgeModule</code> and <code class=\"language-text\">MatButtonModule</code> while you are here.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NgModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CommonModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MatButtonModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/material/button'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MatBadgeModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/material/badge'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CounterButtonComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./counter-button/counter-button.component'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>CommonModule<span class=\"token punctuation\">,</span> MatBadgeModule<span class=\"token punctuation\">,</span> MatButtonModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>CounterButtonComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>CounterButtonComponent<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLibModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Also add the component to <code class=\"language-text\">public_api.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/*\n * Public API Surface of my-new-library\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/my-lib.module'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/counter-button/counter-button.component'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now add logic to the component to handle incrementing the count displayed whenever the button is clicked.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> OnInit<span class=\"token punctuation\">,</span> EventEmitter<span class=\"token punctuation\">,</span> Output <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'lib-counter-button'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'./counter-button.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./counter-button.component.css'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButtonComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> countChanged<span class=\"token punctuation\">:</span> EventEmitter<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  clickCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Increments the count when the button is clicked and emits an event\n   * to notify parent component of new count value\n   */</span>\n  <span class=\"token function\">handleButtonClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clickCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countChanged<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clickCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next we’ll wire up the component to the template.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lib-counter-button<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">mat-raised-button</span>\n  <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[matBadge]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>clickCount<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">matBadgeColor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>accent<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[matBadgeHidden]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>clickCount === 0<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>handleButtonClick()<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n  Click Me!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now we have a component that we want other apps to use! But how do we make sure it works? We’ll handle that next.</p>\n<h2 id=\"using-your-library-in-other-applications\"><a href=\"#using-your-library-in-other-applications\" aria-label=\"using your library in other applications permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using your library in other applications</h2>\n<p>Alright, we have an awesome library ready for use - but how do we actually use it? There’s a couple of different ways.</p>\n<p>The first is to use it within the application that was generated by the CLI when we first started our work. Remember, the Angular CLI doesn’t just generate a single app anymore; instead it generates what the CLI team refers to as a workspace. This means you can build multiple apps and libraries in the same directory and utilize what you built within other projects in the same workspace.</p>\n<p>Open up <code class=\"language-text\">tsconfig.json</code> in the root of your workspace. You’ll see a <code class=\"language-text\">paths</code> option that points to a <code class=\"language-text\">dist/my-new-library</code> directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ...\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"my-new-library\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/my-new-library\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What this does is allow you to automatically use your library, after it’s been built, in other apps in the same workspace. This works similarly to using libraries installed by npm in that you can just import your components and use in your library. This of course means that you <em>must</em> build any libraries that your app depends on <strong>before</strong> you build your app, and will need to rebuild it every time you make a change to the library before those changes will be reflected.</p>\n<p>A sample workflow could work like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng build <span class=\"token operator\">&lt;</span>library-name<span class=\"token operator\">></span> <span class=\"token comment\"># builds your library</span>\n$ ng build <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span> <span class=\"token comment\"># builds the application that depends on your library</span></code></pre></div>\n<p>Now go ahead and build our library, then we will build an example of how to use it using the original app generated in our workspace.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng build my-new-library</code></pre></div>\n<p>This generates the <code class=\"language-text\">dist/</code> directory mentioned eariler. If you open that directory and take a look you’ll see that ng-packagr has generated FESM2015, FESM5, and UMD bundles of the library for consumption and generated a types file.</p>\n<p><img src=\"/media/component-lib-cli/library-dist.png\" alt=\"built library\"></p>\n<p>Now we are ready to use the library in our app!</p>\n<p>Import the <code class=\"language-text\">MyLibModule</code> in <code class=\"language-text\">src/app/app.module.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/platform-browser'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserAnimationsModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/platform-browser/animations'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NgModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MyLibModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'my-new-library'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>BrowserModule<span class=\"token punctuation\">,</span> BrowserAnimationsModule<span class=\"token punctuation\">,</span> MyLibModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>We want to demonstrate that the app is receiving the <code class=\"language-text\">countChanged</code> events from the library component so implement <code class=\"language-text\">handleCountChanged()</code> in <code class=\"language-text\">src/app/app.component.ts</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-root'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'./app.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./app.component.css'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token punctuation\">{</span>\n  title <span class=\"token operator\">=</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">;</span>\n  currentCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">handleCountChanged</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentCount <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now add the <code class=\"language-text\">CounterButtonComponent</code> to <code class=\"language-text\">src/app/app.component.html</code>. Also add a div that shows the values being emitted from the component.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lib-counter-button</span>\n    <span class=\"token attr-name\">(countChanged)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>handleCountChanged($event)<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lib-counter-button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>The current count is {{currentCount}}!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Let’s see our example app in action! Remember to build your library before serving the app.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng build my-new-library <span class=\"token comment\"># build your library</span>\n$ ng serve <span class=\"token comment\"># serve the Angular app dependent on your library</span></code></pre></div>\n<p>Open the browser and you’ll see your component in action!</p>\n<p><img src=\"/media/component-lib-cli/local-app.gif\" alt=\"tada!\"></p>\n<p>Using libraries like this is a great way for you to share code between multiple Angular apps in the same workspace. Additionally, if you are building something like a component library you could use the originally generated Angular app to build great working examples for your library.</p>\n<h2 id=\"publishing-your-library-for-others-to-use\"><a href=\"#publishing-your-library-for-others-to-use\" aria-label=\"publishing your library for others to use permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Publishing your library for others to use</h2>\n<p>So, you’ve built an awesome component library and are using it in your own applications, but what if you want to share it so others can use it in their apps?</p>\n<p>First, if you haven’t published anything on npm before go ahead and sign up.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> adduser</code></pre></div>\n<p>After you sign into your npm account, build the library again. This time use the <code class=\"language-text\">--prod</code> flag so that the Angular CLI will perform some additional steps for optimization.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ng build my-new-library --prod</code></pre></div>\n<p>Now move into <code class=\"language-text\">dist/my-new-library</code>. If you want to test that your package will work in other apps you can link it to your local npm registry.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">link</span></code></pre></div>\n<p>Now create a new Angular workspace and link your library to the project.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> ~/Desktop\n$ ng new test-lib-app\n$ <span class=\"token function\">cd</span> test-lib-app\n$ <span class=\"token function\">npm</span> <span class=\"token function\">link</span> my-new-library</code></pre></div>\n<p>In the new workspace add <code class=\"language-text\">preserveSymLinks</code> to <code class=\"language-text\">angular.json</code> in the <code class=\"language-text\">options</code> object under <code class=\"language-text\">projects/test-lib-app/architect/build</code>. This allows the linking of your library to continue working when the app is served.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"architect\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"builder\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@angular-devkit/build-angular:browser\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"preserveSymlinks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outputPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/test-lib-app\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/index.html\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/main.ts\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"polyfills\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/polyfills.ts\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"tsConfig\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/tsconfig.app.json\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"assets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/favicon.ico\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/assets\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"styles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/styles.css\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Use the library in the same way we did eariler and you see that it will work here as well! To remove the linked library you can use an <code class=\"language-text\">npm remove my-new-library</code> command in the test project and the <code class=\"language-text\">npm unlink</code> command in the directory of your built library.</p>\n<p>If you are ready to publish your app to npm for others go ahead and run the below command inside of your <code class=\"language-text\">dist/my-new-library</code> directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> publish</code></pre></div>\n<p>From there you can use it as you would any other packages using <code class=\"language-text\">npm install</code>.</p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next Steps</h2>\n<p>Congratulations! You have built your component library with Angular and have published it to npm for others to use. Go forth and build cool libraries to share! For next steps I also highly encourage you to dive into the documentation for <a href=\"https://github.com/dherges/ng-packagr/issues?q=label%3Adocumentation%20\">ng-packagr</a> to learn about more advanced topics regarding the library packaging process.</p>\n<p>You can find the code used in the examples in Github <a href=\"https://github.com/bniedermeyer/component-libraries-with-angular-cli\">here</a>.</p>","fields":{"slug":"/posts/component-libs-angular-cli/","tagSlugs":["/tag/angular/","/tag/libraries/","/tag/web-development/","/tag/angular-cli/"]},"frontmatter":{"date":"2018-06-03T22:40:32.169Z","description":"A tutorial focusing on the basics of building Angular component libraries","tags":["Angular","Libraries","Web Development","Angular CLI"],"title":"Getting started building component libraries with the Angular CLI"}}},"pageContext":{"slug":"/posts/component-libs-angular-cli/"}}